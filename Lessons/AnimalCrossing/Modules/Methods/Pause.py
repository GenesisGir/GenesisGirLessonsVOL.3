"""

ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚
                                    
                                    
                            â–ˆâ–€â–ˆâ€ƒâ–ˆâ–€â–ˆâ€ƒâ–ˆâ€ƒâ–ˆâ–„â–‘â–ˆâ€ƒâ–€â–ˆâ–€â€ƒâ–„â–€â€ƒâ–€â–„â€ƒ â€ƒâ–ˆâ–€â–€â€ƒâ–ˆâ–‘â–‘â€ƒâ–ˆâ–€â–ˆâ€ƒâ–ˆâ–„â–‘â–ˆâ€ƒâ–ˆâ–€â–€â€ƒâ–ˆâ–€â–ˆ
                            â–ˆâ–€â–€â€ƒâ–ˆâ–€â–„â€ƒâ–ˆâ€ƒâ–ˆâ–‘â–€â–ˆâ€ƒâ–‘â–ˆâ–‘â€ƒâ–€â–„â€ƒâ–„â–€â€ƒ â€ƒâ–ˆâ–„â–„â€ƒâ–ˆâ–„â–„â€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–‘â–€â–ˆâ€ƒâ–ˆâ–ˆâ–„â€ƒâ–ˆâ–€â–„
                                    â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €â €

                A script that contain's various cloners using different methods of cloning the
                print() to emulate a faster and more efficient way of making the code ore readable!

ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚ ğŸ†ƒğŸ…´ğŸ…½ğŸ…½ğŸ…¸ğŸ†‚
"""

# import modules
import logging, logging.handlers
import time

# from import modules 
from dataclasses import dataclass, field

# Method module imports
from Modules.Methods.ELOC_Cloner import *

# classes
class Pause(): 

    # doc string
    """ program execution delay set by the parameter time """
    
    # class method
    def Execution_delay(sec: int): 
        
        # doc string
        """ defining a function to make freezing exeute easier """
        
        # freeze by the sec parameter
        time.sleep(sec)
        
        # log info
        logger.info(f"Program execution has been delayed by ({sec}) seconds!")
        
        Cloners.Eloc_for_loop(1)
        pass